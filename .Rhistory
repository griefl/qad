test_that("pqad", {
expect_type(pqad(0.2, 100, R = 10, resolution = 10), "double")
expect_type(qqad(0.2, 100, R = 10, resolution = 10), "double")
})
n <- 100
x <- runif(n)
y <- runif(n)
z <- runif(n)
df <- data.frame(x,y,z)
pw_fit <- pairwise.qad(df)
test_that("heatmap.qad", {
expect_equal(class(qad::heatmap.qad(pw_fit, select = "dependence")), c("gg", "ggplot"))
expect_equal(class(qad::heatmap.qad(pw_fit, select = "dependence",
fontsize = 5, significance = T, scale = "rel", color = "viridis", title = "test")), c("gg", "ggplot"))
})
class(pw_fit)
length(pw_fit)
names(pw_fit)
test_that("pairwise qad", {
expect_equal(class(pw_fit), "list")
expect_equal(length(pw_fit), 8)
expect_equal(names(pw_fit), c("q", "max.dependence", "asymmetry", "q_p.values", "max.dependence_p.values", "asymmetry_p.values", "resolution", "n_removed_00")
)
})
pw_fit$q
test_that("pairwise qad", {
expect_equal(class(pw_fit), "list")
expect_equal(length(pw_fit), 8)
expect_equal(names(pw_fit), c("q", "max.dependence", "asymmetry", "q_p.values", "max.dependence_p.values", "asymmetry_p.values", "resolution", "n_removed_00")
)
expect_equal(class(pw_fit$q), "matrix")
})
test_that("pairwise qad", {
expect_equal(class(pw_fit), "list")
expect_equal(length(pw_fit), 8)
expect_equal(names(pw_fit), c("q", "max.dependence", "asymmetry", "q_p.values", "max.dependence_p.values", "asymmetry_p.values", "resolution", "n_removed_00")
)
expect_equal(class(pw_fit$q), "data.frame")
})
pw_fit$max.dependence
pw_fit$resolution
test_that("pairwise qad", {
expect_equal(class(pw_fit), "list")
expect_equal(length(pw_fit), 8)
expect_equal(names(pw_fit), c("q", "max.dependence", "asymmetry", "q_p.values", "max.dependence_p.values", "asymmetry_p.values", "resolution", "n_removed_00")
)
expect_equal(class(pw_fit$q), "data.frame")
expect_equal(class(pw_fit$max.dependence), "data.frame")
expect_equal(class(pw_fit$asymmetry), "data.frame")
expect_equal(class(pw_fit$q_p.values), "data.frame")
expect_equal(class(pw_fit$max.dependence_p.values), "data.frame")
expect_equal(class(pw_fit$asymmetry_p.values), "data.frame")
expect_equal(class(pw_fit$resolution), "data.frame")
})
pw_fit$n_removed_00
n <- 100
x <- runif(n)
y <- runif(n)
z <- runif(n)
df <- data.frame(x,y)#,z)
pw_fit <- pairwise.qad(df)
test_that("heatmap.qad", {
expect_equal(class(qad::heatmap.qad(pw_fit, select = "dependence")), c("gg", "ggplot"))
expect_equal(class(qad::heatmap.qad(pw_fit, select = "dependence",
fontsize = 5, significance = T, scale = "rel", color = "viridis", title = "test")), c("gg", "ggplot"))
})
test_that("pairwise qad", {
expect_equal(class(pw_fit), "list")
expect_equal(length(pw_fit), 8)
expect_equal(names(pw_fit), c("q", "max.dependence", "asymmetry", "q_p.values", "max.dependence_p.values", "asymmetry_p.values", "resolution", "n_removed_00")
)
expect_equal(class(pw_fit$q), "data.frame")
expect_equal(class(pw_fit$max.dependence), "data.frame")
expect_equal(class(pw_fit$asymmetry), "data.frame")
expect_equal(class(pw_fit$q_p.values), "data.frame")
expect_equal(class(pw_fit$max.dependence_p.values), "data.frame")
expect_equal(class(pw_fit$asymmetry_p.values), "data.frame")
expect_equal(class(pw_fit$resolution), "data.frame")
})
n <- 30
x <- c(runif(n),rep(0,500))
y <- c(runif(n),rep(0,500))
fit <- qad(x,y, remove.00 = T)
n <- 71
x <- sample(runif(n,-10,10), n, replace = T)
y <- sample((x)^2 + runif(n,0,1), n, replace = T)
x <- runif(n)
y <- x+ rnorm(n,0,0.1)
p1 <- plot(qad(x,y), addSample = T, copula = F, margin = T, density = F)
p2 <- plot(qad(x,y), addSample = T, copula = T, margin = T, density = F)
cowplot::plot_grid(p1,p2)
coef(qad(x,y, print = F, permutation = T, nperm = 1000))
coef(qad(x,y, print = F, permutation = F, nperm = 1000))
fit <- qad(x,y)
qad_output <- fit
M <- ECBC(x,y,resolution = n)
newdata <- data.frame(x=u_new, y = v_new)
olddata <- data.frame(x = rank(x, ties.method = "max")/n, y = rank(y, ties.method = "max")/n)
p <- plot_density(M)
p <- p + geom_point(data = newdata, aes(x=x, y=y), size = 0.9)
p <- p + geom_point(data = olddata, aes(x=x, y=y), color = "grey", size = 0.9)
p
usethis::use_vignette("my-vignette")
fit
data <- fit$mass_matrix*fit$resolution
res <- fit$resolution
grid <- seq(0, 1, length.out = fit$resolution + 1)
distr <- matrix(0, nrow = fit$resolution + 1, ncol = fit$resolution)
distr[-1,] <- apply(data, 1, cumsum)
View(distr)
names(distr) <- c(paste("Strip",1:res))
distr0 <- distr
distr0$x <- grid
View(distr0)
data <- fit$mass_matrix*fit$resolution
res <- fit$resolution
grid <- seq(0, 1, length.out = fit$resolution + 1)
distr <- matrix(0, nrow = fit$resolution + 1, ncol = fit$resolution)
distr[-1,] <- apply(data, 1, cumsum)
names(distr) <- c(paste("Strip",1:res))
distr0 <- distr
distr0$x
distr <- data.frame(distr)
names(distr) <- c(paste("Strip",1:res))
distr0 <- distr
distr0$x <- grid
df0 <- melt(distr0, variable.name = "Kernel", id.vars = c("x"))
View(distr)
df0 <- data.table::melt(distr0, variable.name = "Kernel", id.vars = c("x"))
df0 <- reshape2::melt(distr0, variable.name = "Kernel", id.vars = c("x"))
View(df0)
#df_approx
R <- 1000
ngrid <- seq(0, 1, length.out = R)
distr <- data.table(apply(distr, 2, function(x) return(approx(x = grid, y = x, xout = ngrid)$y)) )
distr$x <- ngrid
distr <- data.frame(apply(distr, 2, function(x) return(approx(x = grid, y = x, xout = ngrid)$y)) )
distr$x <- ngrid
names(distr) <- c(paste("Strip",1:res),"x")
df <- reshape2::melt(distr, variable.name = "Kernel", id.vars = c("x"))
df$min <- pmin(df$value, df$x)
df$max <- pmax(df$value, df$x)
p <- ggplot()
p <- p + geom_line(data = df0, aes(x = x, y = value, color = Kernel), size = 1.03)
p <- p + geom_line(data = df0, aes(x = x, y = x), size = 1.05, linetype = "dashed")
p <- p + geom_line(data = subset(df0, df0$Kernel == "Strip 1"), aes(x = x, y = value), color = 'magenta', size = 1.05)
p2
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "70%",
echo = FALSE
)
library(ggplot2)
library(qad)
library(gridExtra)
# Chunk 3: plot1
set.seed(5)
n <- 40
X <- runif(n,-1,1)
Y <- X^2 + rnorm(n, 0, 0.05)
df <- data.frame(X,Y)
f_col <- "grey70"
f <- function(x) return(x^2)
p <- ggplot()
p <- p + geom_point(data = df, aes(x = X, y = Y))
p <- p + geom_function(fun = f, color = "blue", alpha = 0.4, size = 1.2, n = 2000, xlim = c(-1,1))
p <- p + geom_path(aes(x=c(-3/4,-3/4,-1.1), y= c(-0.1, f(-3/4), f(-3/4))), color = f_col, size = 1.1,
arrow = arrow(length = unit(0.1, "inches"), ends = "both"))
p <- p + geom_path(aes(x=c(3/4,3/4,-1.1), y= c(-0.1,f(3/4),  f(3/4))), color = f_col, size = 1.1,
arrow = arrow(length = unit(0.1, "inches"), ends = "both"))
p <- p + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
p <- p + scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0))
p <- p + ggtitle("Parabola") + xlab("X") + ylab("Y")
print(p)
# Chunk 4
myscatterplot <- function(x,y, pseudo = FALSE){
df <- data.frame(x,y)
if(pseudo){
df$x <- rank(df$x)/length(df$x)
df$y <- rank(df$y)/length(df$y)
}
p <- ggplot(df, aes(x=x, y=y))
p <- p + geom_point(color = "black", alpha = 0.9, size = 1.2) #ff78b4
p <- p + theme_bw()
p <- p + scale_x_continuous(breaks = function(x) pretty(x,8))
p <- p + scale_y_continuous(breaks = function(x) pretty(x,8))
p <- p + theme(panel.grid = element_blank())
return(p)
}
mydistributionplot <- function(fit){
data <- fit$mass_matrix*fit$resolution
res <- fit$resolution
grid <- seq(0, 1, length.out = fit$resolution + 1)
distr <- matrix(0, nrow = fit$resolution + 1, ncol = fit$resolution)
distr[-1,] <- apply(data, 1, cumsum)
distr <- data.frame(distr)
names(distr) <- c(paste("Strip",1:res))
distr0 <- distr
distr0$x <- grid
df0 <- reshape2::melt(distr0, variable.name = "Kernel", id.vars = c("x"))
#df_approx
R <- 1000
ngrid <- seq(0, 1, length.out = R)
distr <- data.frame(apply(distr, 2, function(x) return(approx(x = grid, y = x, xout = ngrid)$y)) )
distr$x <- ngrid
names(distr) <- c(paste("Strip",1:res),"x")
df <- reshape2::melt(distr, variable.name = "Kernel", id.vars = c("x"))
df$min <- pmin(df$value, df$x)
df$max <- pmax(df$value, df$x)
p <- ggplot()
p <- p + geom_line(data = df0, aes(x = x, y = value, color = Kernel), size = 1.03)
p <- p + geom_line(data = df0, aes(x = x, y = x), size = 1.05, linetype = "dashed")
p <- p + geom_line(data = subset(df0, df0$Kernel == "Strip 1"), aes(x = x, y = value), color = 'magenta', size = 1.05)
p <- p + geom_ribbon(data = subset(df, df$Kernel == "Strip 1"), aes(x = x, ymin = min, ymax = max),fill = "magenta", alpha = 0.3)
p <- p + scale_x_continuous(breaks = function(x) pretty(x, 8))
p <- p + scale_y_continuous(breaks = function(x) pretty(x, 8))
p <- p + scale_color_manual(values = rainbow(fit$resolution, start = 0.9, end = 0.4),
guide = guide_legend(title.position = "top", title.hjust = 0.5))
p <- p + theme_bw() + labs(color = "Conditional distribution function for")
p <- p + theme(legend.position = "bottom", panel.grid.minor = element_line(linetype = "dashed"),
panel.grid.major = element_blank())
return(p)
}
#_____________________________________________________________________________________________
#Example 01 - less noise
x <- df$X
y <- df$Y
coef <- coef(qad(x,y, print = FALSE))
p1 <- myscatterplot(x,y) + xlab("X") + ylab("Y") + ggtitle(paste0("Sample of size n=", n))
fit0 <- qad(x,y,resolution = n, print = FALSE)
p2 <- plot(fit0, addSample = T, copula = T, panel.grid = F, density = T, color = "rainbow", rb_values = c(1,0.75,0.4))
p2 <- p2 + xlab("U:=F(X)~U(0,1)") + ylab("V:=G(Y)~U(0,1)")
p3 <- plot(fit0, addSample = T, copula = T, panel.grid = F, density = T, color = "rainbow", rb_values = c(1,0.75,0.4))
p3 <- p3 + ggtitle("Empirical copula + checkerboard grid") + xlab("U:=F(X)~U(0,1)") + ylab("V:=G(Y)~U(0,1)")
p3 <- p3 + geom_hline(yintercept = seq(0,1,1/floor(sqrt(length(x)))), linetype = "dashed", color = "red")
p3 <- p3 + geom_vline(xintercept = seq(0,1,1/floor(sqrt(length(x)))), linetype = "dashed", color = "red")
fit1 <- qad(X,Y, print = F)
p4 <- plot(fit1, addSample = T, copula = T, panel.grid = F, density = T, color = "rainbow", rb_values = c(30,0.65,0.17)) +
ggtitle("Empirical checkerboard copula") + xlab("U:=F(X)~ U(0,1)") + ylab("V:=G(Y) ~ U(0,1)")  +
geom_hline(yintercept = seq(0,1,1/floor(sqrt(length(X)))), linetype = "dashed", color = "red") +
geom_vline(xintercept = seq(0,1,1/floor(sqrt(length(X)))), linetype = "dashed", color = "red")
p5 <- mydistributionplot(fit1) +
ggtitle(label = "vertical strips",
subtitle = paste0("q_n(X,Y) ~", round(coef[1],3))) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5)) + xlab("t") + ylab("P(V <= t | U in I_i)") +
theme(legend.position = "bottom", axis.title.x = element_blank())
fit2 <- qad(Y,X, print = F)
p6 <- mydistributionplot(fit2) +
ggtitle(label = "horizontal strips",
subtitle = paste0("q_n(Y,X) ~", round(coef[2],3))) +
theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5)) +
xlab("t") + ylab("P(U <= t | V in I_i)") +
theme(legend.position = "bottom", axis.title.x = element_blank())
# Chunk 5
p1
utils::browseVignettes()
utils::browseVignettes("dplyr")
utils::browseVignettes("dplyr")
utils::browseVignettes() ->t
View(t)
print(t[1])
browseVignettes("anomalize")
browseVignettes("anomalize")-> t
View(t)
vignette("qad")
vignette("dplyr")
roxygen2::roxygenise()
vignette("qad")
vignette("qad")
devtools::build_vignettes()
devtools::build()
install.packages("C:/Users/Florian/Doktorat/RPackages/Package-qad/Package qad Version 1.0.1/qad_1.0.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Florian/Doktorat/RPackages/Package-qad/Package qad Version 1.0.1/qad_1.0.1.tar.gz", repos = NULL, type = "source")
library(qad)
remove.packages("qad", lib="~/R/win-library/4.0")
install.packages("C:/Users/Florian/Doktorat/RPackages/Package-qad/Package qad Version 1.0.1/qad_1.0.1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Florian/Doktorat/RPackages/Package-qad/Package qad Version 1.0.1/qad_1.0.1.tar.gz", repos = NULL, type = "source")
vignette("qad")
devtools::install()
remove.packages("qad", lib="~/R/win-library/4.0")
devtools::install()
vignette("qad")
library(qad)
vignette("qad")
devtools::install(build_vignettes = TRUE)
vignette("qad")
library(qad)
browseVignettes()
browseVignettes() ->t
View(t)
vignette("qad")
vignette("r2d3")
vignette("purr")
vignette("dplyr")
vignette("readr")
vignette("lubridate")
vignette("Rcpp")
installr::updateR()
install.packages("qmd")
install.packages("tidyverse")
install.packages(c("shiny", "shinydashboard", "plotly"))
install.packages(c("devtools", "installr"))
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
vignette("qad")
browseVignettes("qad")
devtools::build_vignettes(...)
devtools::build_vignettes()
vignette("qad")
remotes::install_local(build_vignettes = TRUE)
remotes::install_local(build_vignettes = TRUE, force = TRUE)
library(qad)
vignette("qad")
browseVignettes("qad")
browseVignettes("qad") -> t
t
View(t)
vignette(t)
devtools::document(roclets=c('rd', 'collate', 'namespace', 'vignette'))
vignette("qad")
devtools::document(roclets=c('rd', 'collate', 'namespace', 'vignette'))
vignette("qad")
devtools::install(build_vignettes = TRUE)
build_vignettes()
load_all()
build_vignette()
devtools::build_vignette()
devtools::build_vignettes()
devtools::load_all()
vignette("qad")
library(qad)
?qad
library(qad)
vignette("qad")
cut
Sys.setenv(PATH = paste(Sys.getenv("PATH"), "C:\RTools40", "C:\RTools40\mingw64\bin", sep = ";"))
devtools::install(build_vignettes = TRUE)
n <- 100
x <- rnorm(n)
y <- x^2 + rnorm(n, 0, 0.1)
plot(x,y)
y <- x^2 + rnorm(n, 0, 1)
plot(x,y)
qad(x,y)
n <- 100
x <- rnorm(n)
y <- x^2 + rnorm(n, 0, 1)
plot(x,y)
qad(x,y)
library(qad)
qad(x,y)
fit <- qad(x,y)
coef(fit)
#Comparison with correlation
cor(x,y, method = "pearson")
cor(x,y, method = "spearman")
cor(x,y, method = "kendall")
set.seed(20211115)
set.seed(31415)
n <- 100
x <- rnorm(n)
y <- x^2 + rnorm(n, 0, 1)
plot(x,y)
fit <- qad(x,y)
set.seed(3141)
n <- 100
x <- rnorm(n)
y <- x^2 + rnorm(n, 0, 1)
plot(x,y)
set.seed(314)
n <- 100
x <- rnorm(n)
y <- x^2 + rnorm(n, 0, 1)
plot(x,y)
fit <- qad(x,y)
coef(fit)
#Comparison with correlation
cor(x,y, method = "pearson")
cor(x,y, method = "spearman")
cor(x,y, method = "kendall")
test_that("zeta1 returns exact values", {
#Example 1
x <- c(1,2,3,4,5)
y <- c(1,2,3,4,5)
expect_equal(qad::zeta1(x, y, resolution = 5), 0.9)
expect_equal(qad::zeta1(x, y, resolution = 2), 0.6)
expect_equal(qad::zeta1(x, y, resolution = 1), 0)
expect_equal(qad::zeta1(x, y, resolution = 10), 0.9)
expect_equal(qad::zeta1(x,y), qad::zeta1(y,x))
#Example 2
x <- c(1,2,3,4,5,6,7,8,9,10)
y <- c(1,1,1,1,3,3,1,1,1,1)
expect_equal(qad::zeta1(x, y, resolution = 10), 0.48)
expect_equal(qad::zeta1(y, x, resolution = 10), 0.24)
})
library(testthat)
library(qad)
test_that("zeta1 returns exact values", {
#Example 1
x <- c(1,2,3,4,5)
y <- c(1,2,3,4,5)
expect_equal(qad::zeta1(x, y, resolution = 5), 0.9)
expect_equal(qad::zeta1(x, y, resolution = 2), 0.6)
expect_equal(qad::zeta1(x, y, resolution = 1), 0)
expect_equal(qad::zeta1(x, y, resolution = 10), 0.9)
expect_equal(qad::zeta1(x,y), qad::zeta1(y,x))
#Example 2
x <- c(1,2,3,4,5,6,7,8,9,10)
y <- c(1,1,1,1,3,3,1,1,1,1)
expect_equal(qad::zeta1(x, y, resolution = 10), 0.48)
expect_equal(qad::zeta1(y, x, resolution = 10), 0.24)
})
test_that("zeta1 returns exact values", {
#Example 1
x <- c(1,2,3,4,5)
y <- c(1,2,3,4,5)
expect_equal(qad::zeta1(x, y, resolution = 5), 0.9)
expect_equal(qad::zeta1(x, y, resolution = 2), 0.6)
expect_equal(qad::zeta1(x, y, resolution = 1), 0)
expect_equal(qad::zeta1(x, y, resolution = 10), 0.9)
expect_equal(qad::zeta1(x,y), qad::zeta1(y,x))
#Example 2
x <- c(1,2,3,4,5,6,7,8,9,10)
y <- c(1,1,1,1,3,3,1,1,1,1)
expect_equal(qad::zeta1(x, y, resolution = 10), 0.48)
expect_equal(qad::zeta1(y, x, resolution = 10), 0.24)
#Example (checkmin copula)
N <- 10
x <- 1:N
y <- 1:N
expect_equal(qad::zeta1(x,y, resolution = N), 1-1/(2*N))
})
test_that("zeta1 returns exact values", {
#Example 1
x <- c(1,2,3,4,5)
y <- c(1,2,3,4,5)
expect_equal(qad::zeta1(x, y, resolution = 5), 0.9)
expect_equal(qad::zeta1(x, y, resolution = 2), 0.6)
expect_equal(qad::zeta1(x, y, resolution = 1), 0)
expect_equal(qad::zeta1(x, y, resolution = 10), 0.9)
expect_equal(qad::zeta1(x,y), qad::zeta1(y,x))
#Example 2
x <- c(1,2,3,4,5,6,7,8,9,10)
y <- c(1,1,1,1,3,3,1,1,1,1)
expect_equal(qad::zeta1(x, y, resolution = 10), 0.48)
expect_equal(qad::zeta1(y, x, resolution = 10), 0.24)
#Example (checkmin copula)
NN <- c(2,10,22,44,122,200)
for(N in NN){
N <- NN[i]
x <- 1:N
y <- 1:N
expect_equal(qad::zeta1(x,y, resolution = N), 1-1/(2*N))
expect_equal(qad::zeta1(y,x, resolution = N), 1-1/(2*N))
}
})
test_that("zeta1 returns exact values", {
#Example 1
x <- c(1,2,3,4,5)
y <- c(1,2,3,4,5)
expect_equal(qad::zeta1(x, y, resolution = 5), 0.9)
expect_equal(qad::zeta1(x, y, resolution = 2), 0.6)
expect_equal(qad::zeta1(x, y, resolution = 1), 0)
expect_equal(qad::zeta1(x, y, resolution = 10), 0.9)
expect_equal(qad::zeta1(x,y), qad::zeta1(y,x))
#Example 2
x <- c(1,2,3,4,5,6,7,8,9,10)
y <- c(1,1,1,1,3,3,1,1,1,1)
expect_equal(qad::zeta1(x, y, resolution = 10), 0.48)
expect_equal(qad::zeta1(y, x, resolution = 10), 0.24)
#Example (checkmin copula)
NN <- c(2,10,22,44,122,200)
for(N in NN){
x <- 1:N
y <- 1:N
expect_equal(qad::zeta1(x,y, resolution = N), 1-1/(2*N))
expect_equal(qad::zeta1(y,x, resolution = N), 1-1/(2*N))
}
})
test_that("predictions sum to one", {
n <- 8
x <- 1:n
y <- x^2
sample <- data.frame(x, y)
qad.fit <- qad::qad(sample, print = FALSE, resolution = 4)
pred <-qad:: predict.qad(qad.fit, values = c(1, 3, 5, 7), conditioned = "x1", pred_plot = FALSE)
expect_equal(pred$prediction$`x1=1`, c(1,0,0,0))
expect_equal(pred$prediction$`x1=3`, c(0,1,0,0))
expect_equal(pred$prediction$`x1=5`, c(0,0,1,0))
expect_equal(pred$prediction$`x1=7`, c(0,0,0,1))
n <- 250
x <- runif(n, -1, 1)
y <- x^2 + runif(n, -0.1,0.1)
qad.fit <- qad::qad(x,y, print = FALSE)
pred <- qad::predict.qad(qad.fit, values = c(0, 0.5, -0.5), conditioned = "x1", pred_plot = FALSE)
expect_equal(sum(pred$prediction$`x1=0`), 1)
expect_equal(sum(pred$prediction$`x1=0.5`), 1)
expect_equal(sum(pred$prediction$`x1=-0.5`), 1)
})
usethis::use_readme_rmd()
roxygen2::roxygenise()
check()
library(qad)
?qad
library(devtools)
build_vignettes()
devtools:build(vignettes = TRUE)
devtools::build(vignettes = TRUE)
devtools::build()
