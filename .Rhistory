df_p$sign <- with(df_p, ifelse(p.value < sign.level & !is.na(p.value), "*", ""))
df_matr <- dplyr::left_join(df_matr, df_p, by = c("Var1", "Var2"))
df_matr$sign_label <- with(df_matr, ifelse(is.na(value), NA, paste0(value,sign)))
return(df_matr)
}
if(color == "rainbow"){
color_pal <- rainbow(rb_values[1], start = rb_values[2], end = rb_values[3])
}else{
color_pal <- viridis(5, option = color, direction = -1)
}
limit_plot <- c(0,1)
#Select dependence measure
if(select == 'dependence'){
if(use_p.adjust){
df_long <- prepare_data_long(pw_qad$q, pw_qad$q_p.values.adjusted)
}else{
df_long <- prepare_data_long(pw_qad$q, pw_qad$q_p.values)
}
legend_title <- "Dependence: \nq:=q(x,y)"
}else if(select == 'max.dependence'){
if(use_p.adjust){
df_long <- prepare_data_long(pw_qad$max.dependence, pw_qad$max.dependence_p.values.adjusted)
}else{
df_long <- prepare_data_long(pw_qad$max.dependence, pw_qad$max.dependence_p.values)
}
legend_title <- "Max dependence:=\nmax(q(x,y)+q(y,x))"
}else if(select == 'asymmetry'){
if(use_p.adjust){
df_long <- prepare_data_long(pw_qad$asymmetry, pw_qad$asymmetry_p.values.adjusted)
}else{
df_long <- prepare_data_long(pw_qad$asymmetry, pw_qad$asymmetry_p.values)
}
limit_plot <- c(-1,1)
legend_title <- "Asymmetry: \na:=q(x,y)-q(y,x)"
if(color == "rainbow"){
color_pal <- c(rev(rainbow(rb_values[1], start = rb_values[2], end = rb_values[3])),rainbow(rb_values[1], start = rb_values[2], end = rb_values[3])[-1])
}else{
color_pal <- c(rev(viridis(5, option = color, direction = -1)),viridis(5, option = color, direction = -1)[-1])
}
}else{
stop('Select an appropriate select variable. Options are c("dependence","max.dependence","asymmetry")')
}
df_long$text_color <- ifelse(df_long$value > white_font, "high", "low")
#Plot heatmap
p <- ggplot(data = df_long, aes_(x = ~Var2, y = ~Var1, fill = ~value))
p <- p + geom_tile(color = 'white')
if(scale == "rel"){
p <- p + scale_fill_gradientn(colors = color_pal, na.value = "lightgrey", space = "Lab",
name = paste(legend_title))
}else{
p <- p + scale_fill_gradientn(colors = color_pal,
limits = limit_plot, na.value = "lightgrey", space = "Lab",
name = paste(legend_title))
}
p <- p + theme_bw() + coord_fixed() + xlab('Variable 2 (Y)') + ylab("Variable 1 (X)")
if(significance){
p <- p + geom_text(aes_(label = ~sign_label, color = ~text_color), size = fontsize, na.rm=TRUE)
}else{
p <- p + geom_text(aes_(label = ~value, color = ~text_color), size = fontsize, na.rm = TRUE)
}
p <- p + scale_color_manual(values = c("high" = "white", "low" = "black")) + guides(color = "none")
p <- p + theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
p <- p + scale_y_discrete(limits = rev(levels(df_long$Var1)))
if(significance){
if(all(is.na(df_long$p.value))){
warning(paste0("No p.values available"))
}else{
if(use_p.adjust){
p <- p + labs(caption = paste0("Signif. codes:"," '*' ","p.value <", sign.level, " (p.value correction method: ", pw_qad$p.adjust.method, ")"))
message(paste0("p.values are adjusted by using the method ", pw_qad$p.adjust.method))
}else{
p <- p + labs(caption = paste0("Signif. codes:"," '*' ","p.value <", sign.level))
}
}
}
p <- p + ggtitle(title)
return(p)
}
heatmap.qad(model,
select = "asymmetry",
significance = TRUE,
use_p.adjust = TRUE,
fontsize = 6,
white_font = 0.5,
scale = "rel")
heatmap.qad(model,
select = "dependence",
significance = TRUE,
use_p.adjust = TRUE,
fontsize = 6,
white_font = 0.5,
scale = "rel")
#Fit qad
model <- pairwise.qad(sample_df, p.value = TRUE,
p.adjust.method = "holm")
heatmap.qad(model,
select = "dependence",
significance = TRUE,
use_p.adjust = TRUE,
fontsize = 6,
white_font = 0.5,
scale = "rel")
#Fit qad
model <- pairwise.qad(sample_df, p.value = TRUE,
p.adjust.method = "bonferroni")
heatmap.qad(model,
select = "dependence",
significance = TRUE,
use_p.adjust = FALSE,
fontsize = 6, scale = "abs")
heatmap.qad(model,
select = "dependence",
significance = TRUE,
use_p.adjust = TRUE,
fontsize = 6, scale = "abs")
heatmap.qad(model,
select = "dependence",
significance = TRUE,
use_p.adjust = TRUE,
fontsize = 6,
white_font = 0.5,
scale = "rel")
heatmap.qad(model,
select = "dependence",
significance = TRUE,
use_p.adjust = TRUE,
fontsize = 6, scale = "abs")
heatmap.qad(model,
select = "dependence",
significance = TRUE,
use_p.adjust = TRUE,
fontsize = 6, scale = "abs", white_font = 1)
heatmap.qad(model,
select = "dependence",
significance = TRUE,
use_p.adjust = TRUE,
fontsize = 6, scale = "abs", white_font = 0)
sessionInfo()
library(qad)
n <- 100
x1 <- runif(n, 0, 1)
x2 <- x1^2 + rnorm(n, 0, 0.1)
x3 <- runif(n, 0, 1)
x4 <- x3 - x2 + rnorm(n, 0, 0.1)
sample_df <- data.frame(x1,x2,x3,x4)
#Fit qad
model <- pairwise.qad(sample_df, p.value = TRUE,
p.adjust.method = "bonferroni")
heatmap.qad(model,
select = "dependence",
significance = TRUE,
use_p.adjust = FALSE,
fontsize = 6, scale = "abs")
#Fit qad
model <- pairwise.qad(sample_df, p.value = FALSE,
p.adjust.method = "bonferroni")
heatmap.qad(model,
select = "dependence",
significance = TRUE,
use_p.adjust = FALSE,
fontsize = 6, scale = "abs")
heatmap.qad(model,
select = "dependence",
significance = TRUE,
use_p.adjust = TRUE,
fontsize = 6, scale = "abs")
model$q_p.values.adjusted
heatmap.qad <- function(pw_qad,
select = c('dependence','max.dependence','asymmetry'),
fontsize = 4,
significance = FALSE,
use_p.adjust = TRUE,
sign.level = 0.05,
scale = "abs",
color = "plasma",
white_font = 0.7,
rb_values = c(10, 0.315, 0.15),
title = ""){
prepare_data_long <- function(matr, matr.p, n_round = 3){
df_matr <- as.data.frame(as.table(round(as.matrix(matr), n_round)))
names(df_matr) <- c("Var1", "Var2", "value")
df_p <- as.data.frame(as.table(as.matrix(matr.p)))
names(df_p) <- c("Var1", "Var2", "p.value")
df_p$sign <- with(df_p, ifelse(p.value < sign.level & !is.na(p.value), "*", ""))
df_matr <- dplyr::left_join(df_matr, df_p, by = c("Var1", "Var2"))
df_matr$sign_label <- with(df_matr, ifelse(is.na(value), NA, paste0(value,sign)))
return(df_matr)
}
if(color == "rainbow"){
color_pal <- rainbow(rb_values[1], start = rb_values[2], end = rb_values[3])
}else{
color_pal <- viridis(5, option = color, direction = -1)
}
limit_plot <- c(0,1)
#Select dependence measure
if(select == 'dependence'){
if(use_p.adjust){
df_long <- prepare_data_long(pw_qad$q, pw_qad$q_p.values.adjusted)
}else{
df_long <- prepare_data_long(pw_qad$q, pw_qad$q_p.values)
}
legend_title <- "Dependence: \nq:=q(x,y)"
}else if(select == 'max.dependence'){
if(use_p.adjust){
df_long <- prepare_data_long(pw_qad$max.dependence, pw_qad$max.dependence_p.values.adjusted)
}else{
df_long <- prepare_data_long(pw_qad$max.dependence, pw_qad$max.dependence_p.values)
}
legend_title <- "Max dependence:=\nmax(q(x,y)+q(y,x))"
}else if(select == 'asymmetry'){
if(use_p.adjust){
df_long <- prepare_data_long(pw_qad$asymmetry, pw_qad$asymmetry_p.values.adjusted)
}else{
df_long <- prepare_data_long(pw_qad$asymmetry, pw_qad$asymmetry_p.values)
}
limit_plot <- c(-1,1)
legend_title <- "Asymmetry: \na:=q(x,y)-q(y,x)"
if(color == "rainbow"){
color_pal <- c(rev(rainbow(rb_values[1], start = rb_values[2], end = rb_values[3])),rainbow(rb_values[1], start = rb_values[2], end = rb_values[3])[-1])
}else{
color_pal <- c(rev(viridis(5, option = color, direction = -1)),viridis(5, option = color, direction = -1)[-1])
}
}else{
stop('Select an appropriate select variable. Options are c("dependence","max.dependence","asymmetry")')
}
df_long$text_color <- ifelse(df_long$value > white_font, "high", "low")
#Plot heatmap
p <- ggplot(data = df_long, aes_(x = ~Var2, y = ~Var1, fill = ~value))
p <- p + geom_tile(color = 'white')
if(scale == "rel"){
p <- p + scale_fill_gradientn(colors = color_pal, na.value = "lightgrey", space = "Lab",
name = paste(legend_title))
}else{
p <- p + scale_fill_gradientn(colors = color_pal,
limits = limit_plot, na.value = "lightgrey", space = "Lab",
name = paste(legend_title))
}
p <- p + theme_bw() + coord_fixed() + xlab('Variable 2 (Y)') + ylab("Variable 1 (X)")
if(significance){
p <- p + geom_text(aes_(label = ~sign_label, color = ~text_color), size = fontsize, na.rm=TRUE)
}else{
p <- p + geom_text(aes_(label = ~value, color = ~text_color), size = fontsize, na.rm = TRUE)
}
p <- p + scale_color_manual(values = c("high" = "white", "low" = "black")) + guides(color = "none")
p <- p + theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
p <- p + scale_y_discrete(limits = rev(levels(df_long$Var1)))
if(significance){
if(all(is.na(df_long$p.value))){
warning(paste0("No p.values available"))
}else{
if(use_p.adjust){
p <- p + labs(caption = paste0("Signif. codes:"," '*' ","p.value <", sign.level, " (p.value correction method: ", pw_qad$p.adjust.method, ")"))
message(paste0("p.values are adjusted by using the method ", pw_qad$p.adjust.method))
}else{
p <- p + labs(caption = paste0("Signif. codes:"," '*' ","p.value <", sign.level))
}
}
}
p <- p + ggtitle(title)
return(p)
}
heatmap.qad(model,
select = "dependence",
significance = TRUE,
use_p.adjust = TRUE,
fontsize = 6, scale = "abs")
library(ggplot2)
library(viridis)
heatmap.qad(model,
select = "dependence",
significance = TRUE,
use_p.adjust = TRUE,
fontsize = 6, scale = "abs")
library(qad)
library(qad)
n <- 100
x1 <- runif(n, 0, 1)
x2 <- x1^2 + rnorm(n, 0, 0.1)
x3 <- runif(n, 0, 1)
x4 <- x3 - x2 + rnorm(n, 0, 0.1)
sample_df <- data.frame(x1,x2,x3,x4)
#Fit qad
model <- pairwise.qad(sample_df, p.value = FALSE,
p.adjust.method = "bonferroni")
heatmap.qad(model,
select = "dependence",
significance = TRUE,
use_p.adjust = TRUE,
fontsize = 6, scale = "abs")
heatmap.qad(model,
select = "dependence",
significance = TRUE,
use_p.adjust = TRUE,
fontsize = 6, scale = "abs", white_font = 0)
heatmap.qad(model,
select = "dependence",
significance = TRUE,
use_p.adjust = TRUE,
fontsize = 6,
white_font = 0.5,
scale = "rel")
heatmap.qad(model,
select = "dependence",
significance = TRUE,
use_p.adjust = TRUE,
fontsize = 6,
scale = "rel")
heatmap.qad(model,
select = "dependence",
significance = TRUE,
use_p.adjust = TRUE,
fontsize = 6,
scale = "abs")
heatmap.qad(model,
select = "dependence",
significance = TRUE,
use_p.adjust = TRUE,
fontsize = 6)
#Fit qad
model <- pairwise.qad(sample_df, p.value = TRUE,
p.adjust.method = "fdr")
heatmap.qad(model,
select = "dependence",
significance = TRUE,
use_p.adjust = TRUE,
fontsize = 6)
x <- runif(10)
usethis::use_data(x)
data <- read.table("C:/Users/Florian/Doktorat/Publications/2022 - qad-An R-package for quantifying asymmetric dependence/RCodes/Data/data.txt", header = T)
View(data)
qad::qad(data)
test <- qad::qad(data)
plot(test)
usethis::use_data(data)
roxygen2::roxygenise()
PlantDiversity <- read.table("C:/Users/Florian/Doktorat/Publications/2022 - qad-An R-package for quantifying asymmetric dependence/RCodes/Data/data.txt", header = T)
usethis::use_data(PlantDiversity)
roxygen2::roxygenise()
library(qad)
data("PlantDiversity")
roxygen2::roxygenise()
data("PlantDiversity")
qad(PlantDiversity)
fit <- qad(PlantDiversity)
plot(fit, copula = TRUE)
plot(fit, copula = FALSE)
data("PlantDiversity")
fit <- qad(PlantDiversity)
conditioned = "x1"
setminus(c("x1", "x2"), conditioned)
setdiff(c("x1", "x2"), conditioned)
cat(paste0("Intervalls for the variable", setdiff(c("x1", "x2"), conditioned)," \n"))
cat(paste0("Intervalls for the variable ", setdiff(c("x1", "x2"), conditioned)," \n"))
toupper(setdiff(c("x1", "x2"), conditioned))
cat(paste0("\nProbability that ",toupper(setdiff(c("x1", "x2"), conditioned))," given ",toupper(conditioned),"=",conditioned," lies in the interval I_i :\n"))
library(qad)
library(qad)
data("PlanDiversity")
library(qad)
data("PlantDiversity")
View(PlantDiversity)
names(PlantDiversity)
roxygen2::roxygenise()
inherits(data.frame(c(1,2,3)))
inherits(data.frame(c(1,2,3)), "data.frame")
x <- runif(10)
y <- runif(10)
qad_output <- qad::qad(x,y)
inhertis(qad_output, 'qad')
inherits(qad_output, 'qad')
devtools::check()
myscatterplot <- function(x,y, pseudo = FALSE){
df <- data.frame(x,y)
if(pseudo){
df$x <- rank(df$x)/length(df$x)
df$y <- rank(df$y)/length(df$y)
}
p <- ggplot(df, aes(x=x, y=y))
p <- p + geom_point(color = "black", alpha = 0.9, size = 1.2) #ff78b4
p <- p + theme_bw()
p <- p + scale_x_continuous(breaks = function(x) pretty(x,8))
p <- p + scale_y_continuous(breaks = function(x) pretty(x,8))
p <- p + theme(panel.grid = element_blank())
return(p)
}
mydistributionplot <- function(fit){
data <- fit$mass_matrix*fit$resolution
res <- fit$resolution
grid <- seq(0, 1, length.out = fit$resolution + 1)
distr <- matrix(0, nrow = fit$resolution + 1, ncol = fit$resolution)
distr[-1,] <- apply(data, 1, cumsum)
distr <- data.frame(distr)
names(distr) <- c(paste("Strip",1:res))
distr0 <- distr
distr0$x <- grid
df0 <- reshape2::melt(distr0, variable.name = "Kernel", id.vars = c("x"))
#df_approx
R <- 1000
ngrid <- seq(0, 1, length.out = R)
distr <- data.frame(apply(distr, 2, function(x) return(approx(x = grid, y = x, xout = ngrid)$y)) )
distr$x <- ngrid
names(distr) <- c(paste("Strip",1:res),"x")
df <- reshape2::melt(distr, variable.name = "Kernel", id.vars = c("x"))
df$min <- pmin(df$value, df$x)
df$max <- pmax(df$value, df$x)
p <- ggplot()
p <- p + geom_line(data = df0, aes(x = x, y = value, color = Kernel), size = 1.03)
p <- p + geom_line(data = df0, aes(x = x, y = x), size = 1.05, linetype = "dashed")
p <- p + geom_line(data = subset(df0, df0$Kernel == "Strip 1"), aes(x = x, y = value), color = 'magenta', size = 1.05)
p <- p + geom_ribbon(data = subset(df, df$Kernel == "Strip 1"), aes(x = x, ymin = min, ymax = max),fill = "magenta", alpha = 0.3)
p <- p + scale_x_continuous(breaks = function(x) pretty(x, 8))
p <- p + scale_y_continuous(breaks = function(x) pretty(x, 8))
p <- p + scale_color_manual(values = rainbow(fit$resolution, start = 0.9, end = 0.4),
guide = guide_legend(title.position = "top", title.hjust = 0.5))
p <- p + theme_bw() + labs(color = "Conditional distribution function for")
p <- p + theme(legend.position = "bottom", panel.grid.minor = element_line(linetype = "dashed"),
panel.grid.major = element_blank())
return(p)
}
#Example 01 - less noise
x <- df$X
y <- df$Y
coef <- coef(qad(x,y, print = FALSE))
p1 <- myscatterplot(x,y) + xlab("X") + ylab("Y") + ggtitle(paste0("Sample of size n=", n))
ggtitle(paste0("Sample of size n=", n))
myscatterplot(x,y)
myscatterplot(x,y) + xlab("X") + ylab("Y")
n
set.seed(5)
n <- 40
X <- runif(n,-1,1)
Y <- X^2 + rnorm(n, 0, 0.05)
df <- data.frame(X,Y)
f_col <- "grey70"
f <- function(x) return(x^2)
p <- ggplot()
p <- p + geom_point(data = df, aes(x = X, y = Y))
p <- p + geom_function(fun = f, color = "blue", alpha = 0.4, size = 1.2, n = 2000, xlim = c(-1,1))
p <- p + geom_path(aes(x=c(-3/4,-3/4,-1.1), y= c(-0.1, f(-3/4), f(-3/4))), color = f_col, size = 1.1,
arrow = arrow(length = unit(0.1, "inches"), ends = "both"))
p <- p + geom_path(aes(x=c(3/4,3/4,-1.1), y= c(-0.1,f(3/4),  f(3/4))), color = f_col, size = 1.1,
arrow = arrow(length = unit(0.1, "inches"), ends = "both"))
p <- p + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
p <- p + scale_x_continuous(expand = c(0,0)) + scale_y_continuous(expand = c(0,0))
p <- p + ggtitle("Parabola") + xlab("X") + ylab("Y")
print(p)
myscatterplot <- function(x,y, pseudo = FALSE){
df <- data.frame(x,y)
if(pseudo){
df$x <- rank(df$x)/length(df$x)
df$y <- rank(df$y)/length(df$y)
}
p <- ggplot(df, aes(x=x, y=y))
p <- p + geom_point(color = "black", alpha = 0.9, size = 1.2) #ff78b4
p <- p + theme_bw()
p <- p + scale_x_continuous(breaks = function(x) pretty(x,8))
p <- p + scale_y_continuous(breaks = function(x) pretty(x,8))
p <- p + theme(panel.grid = element_blank())
return(p)
}
mydistributionplot <- function(fit){
data <- fit$mass_matrix*fit$resolution
res <- fit$resolution
grid <- seq(0, 1, length.out = fit$resolution + 1)
distr <- matrix(0, nrow = fit$resolution + 1, ncol = fit$resolution)
distr[-1,] <- apply(data, 1, cumsum)
distr <- data.frame(distr)
names(distr) <- c(paste("Strip",1:res))
distr0 <- distr
distr0$x <- grid
df0 <- reshape2::melt(distr0, variable.name = "Kernel", id.vars = c("x"))
#df_approx
R <- 1000
ngrid <- seq(0, 1, length.out = R)
distr <- data.frame(apply(distr, 2, function(x) return(approx(x = grid, y = x, xout = ngrid)$y)) )
distr$x <- ngrid
names(distr) <- c(paste("Strip",1:res),"x")
df <- reshape2::melt(distr, variable.name = "Kernel", id.vars = c("x"))
df$min <- pmin(df$value, df$x)
df$max <- pmax(df$value, df$x)
p <- ggplot()
p <- p + geom_line(data = df0, aes(x = x, y = value, color = Kernel), size = 1.03)
p <- p + geom_line(data = df0, aes(x = x, y = x), size = 1.05, linetype = "dashed")
p <- p + geom_line(data = subset(df0, df0$Kernel == "Strip 1"), aes(x = x, y = value), color = 'magenta', size = 1.05)
p <- p + geom_ribbon(data = subset(df, df$Kernel == "Strip 1"), aes(x = x, ymin = min, ymax = max),fill = "magenta", alpha = 0.3)
p <- p + scale_x_continuous(breaks = function(x) pretty(x, 8))
p <- p + scale_y_continuous(breaks = function(x) pretty(x, 8))
p <- p + scale_color_manual(values = rainbow(fit$resolution, start = 0.9, end = 0.4),
guide = guide_legend(title.position = "top", title.hjust = 0.5))
p <- p + theme_bw() + labs(color = "Conditional distribution function for")
p <- p + theme(legend.position = "bottom", panel.grid.minor = element_line(linetype = "dashed"),
panel.grid.major = element_blank())
return(p)
}
#Example 01 - less noise
x <- df$X
y <- df$Y
coef <- coef(qad(x,y, print = FALSE))
p1 <- myscatterplot(x,y) + xlab("X") + ylab("Y") + ggtitle(paste0("Sample of size n=", n))
fit0 <- qad(x,y,resolution = n, print = FALSE)
p2 <- plot(fit0, addSample = T, copula = T, panel.grid = F, density = T, color = "rainbow", rb_values = c(1,0.75,0.4))
fit0 <- qad(x,y,resolution = n, print = FALSE)
class(fit0)
devtools::check()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check(manual = TRUE)
H
devtools::check(manual = TRUE)
devtools::check(manual = TRUE)
devtools::check(manual = TRUE)
library(qad)
